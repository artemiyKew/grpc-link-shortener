// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/link/link.proto

package gatewayapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LinkShortener_CreateShortLink_FullMethodName = "/link.LinkShortener/CreateShortLink"
	LinkShortener_GetShortLink_FullMethodName    = "/link.LinkShortener/GetShortLink"
	LinkShortener_GetLinksList_FullMethodName    = "/link.LinkShortener/GetLinksList"
)

// LinkShortenerClient is the client API for LinkShortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkShortenerClient interface {
	CreateShortLink(ctx context.Context, in *CreateShortLinkRequest, opts ...grpc.CallOption) (*CreateShortLinkResponse, error)
	GetShortLink(ctx context.Context, in *GetShortLinkRequest, opts ...grpc.CallOption) (*GetShortLinkResponse, error)
	GetLinksList(ctx context.Context, in *GetLinksListRequest, opts ...grpc.CallOption) (*GetLinksListResponse, error)
}

type linkShortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkShortenerClient(cc grpc.ClientConnInterface) LinkShortenerClient {
	return &linkShortenerClient{cc}
}

func (c *linkShortenerClient) CreateShortLink(ctx context.Context, in *CreateShortLinkRequest, opts ...grpc.CallOption) (*CreateShortLinkResponse, error) {
	out := new(CreateShortLinkResponse)
	err := c.cc.Invoke(ctx, LinkShortener_CreateShortLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkShortenerClient) GetShortLink(ctx context.Context, in *GetShortLinkRequest, opts ...grpc.CallOption) (*GetShortLinkResponse, error) {
	out := new(GetShortLinkResponse)
	err := c.cc.Invoke(ctx, LinkShortener_GetShortLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkShortenerClient) GetLinksList(ctx context.Context, in *GetLinksListRequest, opts ...grpc.CallOption) (*GetLinksListResponse, error) {
	out := new(GetLinksListResponse)
	err := c.cc.Invoke(ctx, LinkShortener_GetLinksList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkShortenerServer is the server API for LinkShortener service.
// All implementations must embed UnimplementedLinkShortenerServer
// for forward compatibility
type LinkShortenerServer interface {
	CreateShortLink(context.Context, *CreateShortLinkRequest) (*CreateShortLinkResponse, error)
	GetShortLink(context.Context, *GetShortLinkRequest) (*GetShortLinkResponse, error)
	GetLinksList(context.Context, *GetLinksListRequest) (*GetLinksListResponse, error)
	mustEmbedUnimplementedLinkShortenerServer()
}

// UnimplementedLinkShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedLinkShortenerServer struct {
}

func (UnimplementedLinkShortenerServer) CreateShortLink(context.Context, *CreateShortLinkRequest) (*CreateShortLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortLink not implemented")
}
func (UnimplementedLinkShortenerServer) GetShortLink(context.Context, *GetShortLinkRequest) (*GetShortLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortLink not implemented")
}
func (UnimplementedLinkShortenerServer) GetLinksList(context.Context, *GetLinksListRequest) (*GetLinksListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinksList not implemented")
}
func (UnimplementedLinkShortenerServer) mustEmbedUnimplementedLinkShortenerServer() {}

// UnsafeLinkShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkShortenerServer will
// result in compilation errors.
type UnsafeLinkShortenerServer interface {
	mustEmbedUnimplementedLinkShortenerServer()
}

func RegisterLinkShortenerServer(s grpc.ServiceRegistrar, srv LinkShortenerServer) {
	s.RegisterService(&LinkShortener_ServiceDesc, srv)
}

func _LinkShortener_CreateShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkShortenerServer).CreateShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkShortener_CreateShortLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkShortenerServer).CreateShortLink(ctx, req.(*CreateShortLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkShortener_GetShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkShortenerServer).GetShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkShortener_GetShortLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkShortenerServer).GetShortLink(ctx, req.(*GetShortLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkShortener_GetLinksList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinksListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkShortenerServer).GetLinksList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkShortener_GetLinksList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkShortenerServer).GetLinksList(ctx, req.(*GetLinksListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkShortener_ServiceDesc is the grpc.ServiceDesc for LinkShortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkShortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "link.LinkShortener",
	HandlerType: (*LinkShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortLink",
			Handler:    _LinkShortener_CreateShortLink_Handler,
		},
		{
			MethodName: "GetShortLink",
			Handler:    _LinkShortener_GetShortLink_Handler,
		},
		{
			MethodName: "GetLinksList",
			Handler:    _LinkShortener_GetLinksList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/link/link.proto",
}
